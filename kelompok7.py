# -*- coding: utf-8 -*-
"""Kelompok7.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sc0wMGa1FmtKrRmpWPFQIf_IAiJHjOt9

# **ESSENTIALS**
"""

!pip install kaggle

import os
os.environ['KAGGLE_CONFIG_DIR'] = "/content"

!kaggle datasets download -d marquis03/vehicle-classification

import zipfile

with zipfile.ZipFile("vehicle-classification.zip","r") as zip_ref:
    zip_ref.extractall("vehicle_classification")

import os

base_dir = "vehicle_classification"

for split in ['train', 'val']:
    folder = os.path.join(base_dir, split)
    print(f"\n=== {split.upper()} SET ===")
    classes = os.listdir(folder)
    for c in classes:
        n_files = len(os.listdir(os.path.join(folder, c)))
        print(f"Class '{c}': {n_files} images")

# Khusus test set
test_folder = os.path.join(base_dir, 'test')
n_test_files = len(os.listdir(test_folder))
print(f"\n=== TEST SET ===\nTotal test images: {n_test_files}")

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import numpy as np
import matplotlib.pyplot as plt

# Path direktori
base_dir = '/content/vehicle_classification'
train_dir = base_dir + '/train'
val_dir = base_dir + '/val'
test_dir = base_dir + '/test'

"""# **AUGMENTATION**"""

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

# Path dataset
train_dir = '/content/vehicle_classification/train'
val_dir = '/content/vehicle_classification/val'

# Image Augmentation
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.1,
    height_shift_range=0.1,
    shear_range=0.1,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

val_datagen = ImageDataGenerator(rescale=1./255)

# Load dataset
train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)

val_generator = val_datagen.flow_from_directory(
    val_dir,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical'
)

# Load pretrained model
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))

# Freeze sebagian layer dulu
for layer in base_model.layers[:-20]:
    layer.trainable = False

# Tambahkan custom classifier
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dropout(0.5)(x)
predictions = Dense(10, activation='softmax')(x)

model = Model(inputs=base_model.input, outputs=predictions)

# Compile model
model.compile(optimizer=Adam(learning_rate=1e-4), loss='categorical_crossentropy', metrics=['accuracy'])

# Early stopping & checkpoint
early_stop = EarlyStopping(monitor='val_loss', patience=5, restore_best_weights=True)
checkpoint = ModelCheckpoint('best_model.keras', monitor='val_loss', save_best_only=True)

# Train model
history = model.fit(
    train_generator,
    epochs=30,
    validation_data=val_generator,
    callbacks=[early_stop, checkpoint]
)

"""# **EVALUTIAON**"""

# Plot training & validation accuracy
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(len(acc))

plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('Training and Validation Accuracy')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper right')
plt.title('Training and Validation Loss')

plt.show()

import os
from tensorflow.keras.preprocessing import image

test_images = os.listdir(test_dir)

print(f"Total test images: {len(test_images)}")

import random

# Ambil random test image
img_name = random.choice(test_images)
img_path = os.path.join(test_dir, img_name)

# Load & preprocess image
img = image.load_img(img_path, target_size=(224, 224))
img_array = image.img_to_array(img) / 255.0
img_array = np.expand_dims(img_array, axis=0)

# Prediksi
prediction = model.predict(img_array)
predicted_class = np.argmax(prediction[0])
class_indices = train_generator.class_indices
class_labels = {v: k for k, v in class_indices.items()}
predicted_label = class_labels[predicted_class]

# Show image + prediksi
plt.imshow(img)
plt.axis('off')
plt.title(f"Predicted: {predicted_label}")
plt.show()

# Simpan model
model.save('best_model.keras')

import pickle

class_indices = {
    'SUV': 0,
    'bus': 1,
    'family sedan': 2,
    'fire engine': 3,
    'heavy truck': 4,
    'jeep': 5,
    'minibus': 6,
    'racing car': 7,
    'taxi': 8,
    'truck': 9
}

# Simpan ke file pickle
with open('class_indices.pkl', 'wb') as f:
    pickle.dump(class_indices, f)